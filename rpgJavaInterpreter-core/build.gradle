//-----------------
//interpreter-core build script
//-----------------
buildscript {
    ext.kotlin_version = '1.3.41'
    ext.antlr_version = '4.7.2'

    repositories {
        mavenCentral()
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jlleitschuh.gradle.ktlint" version "8.2.0"
}

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'idea'
apply plugin: 'jacoco'

def antlrVersion = ext.antlr_version

dependencies {
    antlr "org.antlr:antlr4:$antlr_version"
    compile "org.antlr:antlr4-runtime:$antlr_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version".toString()
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version".toString()
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version".toString()
    compile "com.github.ftomassetti:kolasu:4249345373"

    compile "org.apache.logging.log4j:log4j-api-kotlin:1.0.0"
    compile "org.apache.logging.log4j:log4j-api:2.12.1"
    compile "org.apache.logging.log4j:log4j-core:2.12.1"

    compile 'commons-io:commons-io:2.6'
    compile 'org.jetbrains.exposed:exposed:0.17.1'
    compile 'com.github.ajalt:clikt:2.1.0'

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version".toString()
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version".toString()
    testCompile 'junit:junit:4.12'
    testCompile 'org.hsqldb:hsqldb:2.5.0'
    testCompile 'io.mockk:mockk:1.9'
}

configurations.all() {
    resolutionStrategy.force "org.antlr:antlr4-runtime:$antlrVersion"
    resolutionStrategy.force "org.antlr:antlr4-tool:$antlrVersion"
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-package', 'com.smeup.rpgparser']
    outputDirectory = file("generated-src/antlr/main/com/smeup/rpgparser".toString())
}
compileKotlin.dependsOn generateGrammarSource
compileJava.dependsOn generateGrammarSource
sourceSets {
    generated {
        java.srcDir file("generated-src/antlr/main/")
    }
}
compileJava.source sourceSets.generated.java, sourceSets.main.java
compileKotlin.source sourceSets.generated.java, sourceSets.main.java, sourceSets.main.kotlin

clean{
    delete file("generated-src")
}

idea {
    module {
        sourceDirs += file("generated-src/antlr/main")
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
    useJUnit {
        excludeCategories 'com.smeup.rpgparser.PerformanceTest'
    }
}

task testPerformance(type: Test) {
    maxHeapSize = "2048m"
    testLogging {
        events "passed", "skipped", "failed"
    }
    useJUnit {
        includeCategories 'com.smeup.rpgparser.PerformanceTest'
    }
}

task testAll(type: Test) {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacoco {
    toolVersion = "0.8.3"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }
    afterEvaluate {
        getClassDirectories().from = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/RpgLexer*',
                              '**/RpgParser*',
                              '**/RpgParser*',
                              '**/RpgParser*'])
        })
    }
}

check.dependsOn jacocoTestReport

//gradlew runExample -Pargs="CALCFIB,9"
task runExample (type: JavaExec) {
    if(project.hasProperty('programArgs')){
        args(project.getProperties().get("programArgs").split(','))
    }
    main="com.smeup.rpgparser.execution.RunnerKt"
    classpath = sourceSets.test.runtimeClasspath
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.smeup.rpgparser.execution.RunnerKt'
    }
    archiveBaseName = project.name + '-all'
    archiveVersion = ''
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task runMutesTests(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.smeup.rpgparser.mute.MuterunnerKt'
    args '../mutes_for_ci', "-v", "-lc", "../mutes_for_ci/mute_logging.config"
}

check.dependsOn runMutesTests